#ifndef UTIL_TYPETRAITS_ISFLOAT_HPP
#define UTIL_TYPETRAITS_ISFLOAT_HPP


//******************************************************************************
// Includes
//******************************************************************************

#include <type_traits>


namespace FCFD
{
namespace type_traits
{
//******************************************************************************
// compile time check for single precision floating point types.
template< typename T >
struct IsFloat
   : public std::false_type
{};
//******************************************************************************


//******************************************************************************
template<>
struct IsFloat<float>
   : public std::true_type
{};
//******************************************************************************

//******************************************************************************
template<>
struct IsFloat<const float>
   : public std::true_type
{};
//******************************************************************************

//******************************************************************************
template<>
struct IsFloat<volatile float>
   : public std::true_type
{};
//******************************************************************************

//******************************************************************************
template<>
struct IsFloat<const volatile float>
   : public std::true_type
{};
//******************************************************************************
//******************************************************************************
template< typename T >
constexpr bool IsFloat_v = IsFloat<T>::value;
//******************************************************************************
} //
}
#endif